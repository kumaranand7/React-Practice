{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mobil\\\\Desktop\\\\Practic React\\\\my-app\\\\src\\\\Components\\\\Inkoop.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Inkoop() {\n  _s();\n  const [number, setNumber] = useState('');\n\n  // Convert the input to a number\n  const numberValue = Number(number);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is Inkoop assignment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: number,\n      onChange: e => setNumber(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), number !== '' && (\n    // Check if number is not an empty string\n    numberValue % 2 === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [number, \" is Even\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [number, \" is Odd\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 23\n    }, this))]\n  }, void 0, true);\n}\n_s(Inkoop, \"/S//3W9EisCdLYCOaRROAOn7cBc=\");\n_c = Inkoop;\nexport default Inkoop;\nvar _c;\n$RefreshReg$(_c, \"Inkoop\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Inkoop","_s","number","setNumber","numberValue","Number","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/mobil/Desktop/Practic React/my-app/src/Components/Inkoop.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction Inkoop() {\r\n    const [number, setNumber] = useState('');\r\n\r\n    // Convert the input to a number\r\n    const numberValue = Number(number);\r\n\r\n    return (\r\n        <>\r\n            <p>This is Inkoop assignment</p>\r\n            <input\r\n                type=\"number\"\r\n                value={number}\r\n                onChange={(e) => setNumber(e.target.value)}\r\n            />\r\n\r\n            {/* Conditional rendering */}\r\n            {number !== '' && ( // Check if number is not an empty string\r\n                (numberValue % 2 === 0)\r\n                    ? <p>{number} is Even</p>\r\n                    : <p>{number} is Odd</p>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Inkoop;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMS,WAAW,GAAGC,MAAM,CAACH,MAAM,CAAC;EAElC,oBACIL,OAAA,CAAAE,SAAA;IAAAO,QAAA,gBACIT,OAAA;MAAAS,QAAA,EAAG;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAChCb,OAAA;MACIc,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAEV,MAAO;MACdW,QAAQ,EAAGC,CAAC,IAAKX,SAAS,CAACW,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EAGDR,MAAM,KAAK,EAAE;IAAM;IACfE,WAAW,GAAG,CAAC,KAAK,CAAC,gBAChBP,OAAA;MAAAS,QAAA,GAAIJ,MAAM,EAAC,UAAQ;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBACvBb,OAAA;MAAAS,QAAA,GAAIJ,MAAM,EAAC,SAAO;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAC/B;EAAA,eACH,CAAC;AAEX;AAACT,EAAA,CAvBQD,MAAM;AAAAgB,EAAA,GAANhB,MAAM;AAyBf,eAAeA,MAAM;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}